{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sathwik\\\\Documents\\\\NEU\\\\WebD\\\\final_proj\\\\INFO6150_Final_Project\\\\Web-Design-Group-Project-Main\\\\react-app\\\\src\\\\components\\\\Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Button, Container, Alert } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const [credentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const [error, setError] = useState('');\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCredentials(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    try {\n      // This is a mock login - replace with your actual login API call\n      const response = await mockLoginAPI(credentials);\n\n      // Store user data in localStorage or your state management solution\n      localStorage.setItem('user', JSON.stringify(response));\n\n      // Redirect based on user role\n      if (response.role === 'Admin') {\n        navigate('/admin/user-management');\n      } else {\n        navigate('/dashboard'); // or wherever regular users should go\n      }\n    } catch (err) {\n      setError('Invalid email or password');\n    }\n  };\n\n  // Mock API call - replace with your actual API call\n  const mockLoginAPI = async creds => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock validation - replace with actual validation\n    if (creds.email === 'admin@example.com' && creds.password === 'admin123') {\n      return {\n        id: 1,\n        email: creds.email,\n        role: 'Admin',\n        name: 'Admin User'\n      };\n    } else if (creds.email === 'user@example.com' && creds.password === 'user123') {\n      return {\n        id: 2,\n        email: creds.email,\n        role: 'User',\n        name: 'Regular User'\n      };\n    }\n    throw new Error('Invalid credentials');\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mx-auto\",\n      style: {\n        maxWidth: '400px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            name: \"email\",\n            placeholder: \"Enter email\",\n            value: credentials.email,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            name: \"password\",\n            placeholder: \"Password\",\n            value: credentials.password,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          className: \"w-100\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"molcycumvcgxPKqsujhX7y8JYYo=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Form","Button","Container","Alert","useNavigate","jsxDEV","_jsxDEV","Login","_s","navigate","credentials","setCredentials","email","password","error","setError","handleChange","e","name","value","target","prev","handleSubmit","preventDefault","response","mockLoginAPI","localStorage","setItem","JSON","stringify","role","err","creds","Promise","resolve","setTimeout","id","Error","className","children","style","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","variant","onSubmit","Group","Label","Control","type","placeholder","onChange","required","_c","$RefreshReg$"],"sources":["C:/Users/Sathwik/Documents/NEU/WebD/final_proj/INFO6150_Final_Project/Web-Design-Group-Project-Main/react-app/src/components/Login.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, Button, Container, Alert } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst Login: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [credentials, setCredentials] = useState<LoginCredentials>({\r\n    email: '',\r\n    password: ''\r\n  });\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setCredentials(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    try {\r\n      // This is a mock login - replace with your actual login API call\r\n      const response = await mockLoginAPI(credentials);\r\n      \r\n      // Store user data in localStorage or your state management solution\r\n      localStorage.setItem('user', JSON.stringify(response));\r\n\r\n      // Redirect based on user role\r\n      if (response.role === 'Admin') {\r\n        navigate('/admin/user-management');\r\n      } else {\r\n        navigate('/dashboard'); // or wherever regular users should go\r\n      }\r\n    } catch (err) {\r\n      setError('Invalid email or password');\r\n    }\r\n  };\r\n\r\n  // Mock API call - replace with your actual API call\r\n  const mockLoginAPI = async (creds: LoginCredentials): Promise<any> => {\r\n    // Simulate API call delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Mock validation - replace with actual validation\r\n    if (creds.email === 'admin@example.com' && creds.password === 'admin123') {\r\n      return {\r\n        id: 1,\r\n        email: creds.email,\r\n        role: 'Admin',\r\n        name: 'Admin User'\r\n      };\r\n    } else if (creds.email === 'user@example.com' && creds.password === 'user123') {\r\n      return {\r\n        id: 2,\r\n        email: creds.email,\r\n        role: 'User',\r\n        name: 'Regular User'\r\n      };\r\n    }\r\n    throw new Error('Invalid credentials');\r\n  };\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <div className=\"mx-auto\" style={{ maxWidth: '400px' }}>\r\n        <h2 className=\"text-center mb-4\">Login</h2>\r\n        {error && <Alert variant=\"danger\">{error}</Alert>}\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Enter email\"\r\n              value={credentials.email}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={credentials.password}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </Form.Group>\r\n\r\n          <Button variant=\"primary\" type=\"submit\" className=\"w-100\">\r\n            Login\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}